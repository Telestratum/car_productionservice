# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Carsdetails(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, vehicle_id: str=None, model_type: str=None, model_name: str=None, fuel_type: str=None, trim: str=None, stock: int=None, transmission: str=None):  # noqa: E501
        """Carsdetails - a model defined in Swagger

        :param vehicle_id: The vehicle_id of this Carsdetails.  # noqa: E501
        :type vehicle_id: str
        :param model_type: The model_type of this Carsdetails.  # noqa: E501
        :type model_type: str
        :param model_name: The model_name of this Carsdetails.  # noqa: E501
        :type model_name: str
        :param fuel_type: The fuel_type of this Carsdetails.  # noqa: E501
        :type fuel_type: str
        :param trim: The trim of this Carsdetails.  # noqa: E501
        :type trim: str
        :param stock: The stock of this Carsdetails.  # noqa: E501
        :type stock: int
        :param transmission: The transmission of this Carsdetails.  # noqa: E501
        :type transmission: str
        """
        self.swagger_types = {
            'vehicle_id': str,
            'model_type': str,
            'model_name': str,
            'fuel_type': str,
            'trim': str,
            'stock': int,
            'transmission': str
        }

        self.attribute_map = {
            'vehicle_id': 'vehicle_id',
            'model_type': 'model_type',
            'model_name': 'model_name',
            'fuel_type': 'fuel_type',
            'trim': 'trim',
            'stock': 'stock',
            'transmission': 'transmission'
        }
        self._vehicle_id = vehicle_id
        self._model_type = model_type
        self._model_name = model_name
        self._fuel_type = fuel_type
        self._trim = trim
        self._stock = stock
        self._transmission = transmission

    @classmethod
    def from_dict(cls, dikt) -> 'Carsdetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The carsdetails of this Carsdetails.  # noqa: E501
        :rtype: Carsdetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vehicle_id(self) -> str:
        """Gets the vehicle_id of this Carsdetails.

        unique id  # noqa: E501

        :return: The vehicle_id of this Carsdetails.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id: str):
        """Sets the vehicle_id of this Carsdetails.

        unique id  # noqa: E501

        :param vehicle_id: The vehicle_id of this Carsdetails.
        :type vehicle_id: str
        """

        self._vehicle_id = vehicle_id

    @property
    def model_type(self) -> str:
        """Gets the model_type of this Carsdetails.

        modeltype  # noqa: E501

        :return: The model_type of this Carsdetails.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this Carsdetails.

        modeltype  # noqa: E501

        :param model_type: The model_type of this Carsdetails.
        :type model_type: str
        """

        self._model_type = model_type

    @property
    def model_name(self) -> str:
        """Gets the model_name of this Carsdetails.

        modelname  # noqa: E501

        :return: The model_name of this Carsdetails.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this Carsdetails.

        modelname  # noqa: E501

        :param model_name: The model_name of this Carsdetails.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def fuel_type(self) -> str:
        """Gets the fuel_type of this Carsdetails.

        car varient  # noqa: E501

        :return: The fuel_type of this Carsdetails.
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type: str):
        """Sets the fuel_type of this Carsdetails.

        car varient  # noqa: E501

        :param fuel_type: The fuel_type of this Carsdetails.
        :type fuel_type: str
        """

        self._fuel_type = fuel_type

    @property
    def trim(self) -> str:
        """Gets the trim of this Carsdetails.

        type of car  # noqa: E501

        :return: The trim of this Carsdetails.
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim: str):
        """Sets the trim of this Carsdetails.

        type of car  # noqa: E501

        :param trim: The trim of this Carsdetails.
        :type trim: str
        """

        self._trim = trim

    @property
    def stock(self) -> int:
        """Gets the stock of this Carsdetails.

        number of available cars  # noqa: E501

        :return: The stock of this Carsdetails.
        :rtype: int
        """
        return self._stock

    @stock.setter
    def stock(self, stock: int):
        """Sets the stock of this Carsdetails.

        number of available cars  # noqa: E501

        :param stock: The stock of this Carsdetails.
        :type stock: int
        """

        self._stock = stock

    @property
    def transmission(self) -> str:
        """Gets the transmission of this Carsdetails.

        Transmission type  # noqa: E501

        :return: The transmission of this Carsdetails.
        :rtype: str
        """
        return self._transmission

    @transmission.setter
    def transmission(self, transmission: str):
        """Sets the transmission of this Carsdetails.

        Transmission type  # noqa: E501

        :param transmission: The transmission of this Carsdetails.
        :type transmission: str
        """

        self._transmission = transmission
